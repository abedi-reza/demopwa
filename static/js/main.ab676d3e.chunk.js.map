{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","props","state","contacts","handleAddToHomescreenClick","alert","handleSubmit","bind","fetch","then","res","json","data","console","log","catch","this","login","md","className","htmlFor","type","id","onClick","far","icon","onAddToHomescreenClick","Component","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"8WAWMA,E,YAOJ,WAAYC,GAAQ,IAAD,8BAChB,4CAAMA,KANTC,MAAQ,CACNC,SAAU,IAIO,EAwCpBC,2BAA6B,WAC5BC,MAAM,wEAvCH,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAFJ,E,iFAOjBC,MAAM,oDACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAACG,GAELC,QAAQC,IAAIF,MAEbG,MAAMF,QAAQC,O,sEAwBjBE,KAAKC,U,+BAUJ,OACC,6BACA,kBAAC,IAAD,KACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAQC,GAAG,KACT,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,8BACE,uBAAGC,UAAU,uBAAb,4BACA,2BACEC,QAAQ,wBACRD,UAAU,+BAFZ,2DAMA,2BACEE,KAAK,OACLC,GAAG,wBACHH,UAAU,iBAEZ,6BACA,2BACEC,QAAQ,yBACRD,UAAU,+BAFZ,+CAMA,2BACEE,KAAK,WACLC,GAAG,yBACHH,UAAU,iBAEZ,yBAAKA,UAAU,yBACb,kBAAC,IAAD,CAAQA,UAAU,yBAAyBE,KAAK,SAASE,QAASP,KAAKV,cAAvE,2BAEE,kBAAC,IAAD,CAASkB,KAAG,EAACC,KAAK,cAAcN,UAAU,iBAS1D,kBAAC,IAAD,CAAiBO,uBAAwBV,KAAKZ,kC,GAlG7BuB,aAsHJC,E,iLAVX,OACE,kBAAC,IAAD,KACE,6BACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW/B,U,GANzB2B,aCxGZK,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACT9B,MAAK,SAAAmC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB5C,QACfuC,UAAUC,cAAcO,YAI1BpC,QAAQC,IACN,iHAKE0B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/B,QAAQC,IAAI,sCAGR0B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5B7B,OAAM,SAAAqC,GACLvC,QAAQuC,MAAM,4CAA6CA,MC1FjEC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBhB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,WAAwBxB,OAAOC,SAASwB,MACpDC,SAAW1B,OAAOC,SAASyB,OAIvC,OAGF1B,OAAO2B,iBAAiB,QAAQ,WAC9B,IAAMtB,EAAK,UAAMmB,WAAN,sBAEP1B,IAgEV,SAAiCO,EAAOC,GAEtChC,MAAM+B,GACH9B,MAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C1B,UAAUC,cAAc0B,MAAM3D,MAAK,SAAAmC,GACjCA,EAAayB,aAAa5D,MAAK,WAC7ByB,OAAOC,SAASmC,eAKpBhC,EAAgBC,EAAOC,MAG1BzB,OAAM,WACLF,QAAQC,IACN,oEArFAyD,CAAwBhC,EAAOC,GAI/BC,UAAUC,cAAc0B,MAAM3D,MAAK,WACjCI,QAAQC,IACN,iHAMJwB,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.ab676d3e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { BrowserRouter, Route, Link } from 'react-router-dom';\nimport { HashRouter } from 'react-router-dom'\nimport './App.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { MDBContainer, MDBRow, MDBCol, MDBBtn, MDBCard, MDBCardBody, MDBIcon } from 'mdbreact';\nimport axios from \"axios\";\nimport AddToHomescreen from 'react-add-to-homescreen';\n \nclass Home extends Component{\n\n  state = {\n    contacts: []\n  };\n\n\n  constructor(props) {\n     super(props);\n     this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount(){\n   \n    fetch('https://dev.bidopin.com/api/v1/app-info/customer')\n    .then(res => res.json())\n    .then((data) => {\n      // this.setState({ contacts: data })\n      console.log(data)\n    })\n    .catch(console.log)\n\n    // fetch('http://jsonplaceholder.typicode.com/users')\n    // .then(res => res.json())\n    // .then((data) => {\n    //   this.setState({ contacts: data })\n    //   console.log(data)\n    // })\n    // .catch(console.log)\n \n  }\n \n  \n  login() {\n\n  // fetch('http://jsonplaceholder.typicode.com/users')\n  //   .then(res => res.json())\n  //   .then((data) => {\n  //     this.setState({ contacts: data })\n  //   })\n  //   .catch(console.log)\n  } \n\n handleSubmit() { \n  this.login()\n }\n\n handleAddToHomescreenClick = () => {\n  alert(`\n    1. Open Share menu\n    2. Tap on \"Add to Home Screen\" button`);\n};\n\n render() {\n   return (\n    <div> \n    <MDBContainer>\n    <MDBRow>\n      <MDBCol md=\"6\">\n        <MDBCard>\n          <MDBCardBody>\n            <form>\n              <p className=\"h4 text-center py-4\">ورود</p>\n              <label\n                htmlFor=\"defaultFormCardNameEx\"\n                className=\"grey-text font-weight-light\"\n              >\n                نام کاربری\n              </label>\n              <input\n                type=\"text\"\n                id=\"defaultFormCardNameEx\"\n                className=\"form-control\"\n              />\n              <br />\n              <label\n                htmlFor=\"defaultFormCardEmailEx\"\n                className=\"grey-text font-weight-light\"\n              >\n                رمز عبور\n              </label>\n              <input\n                type=\"password\"\n                id=\"defaultFormCardEmailEx\"\n                className=\"form-control\"\n              />\n              <div className=\"text-center py-4 mt-3\">\n                <MDBBtn className=\"btn btn-outline-purple\" type=\"submit\" onClick={this.handleSubmit}>\n                  ورود\n                  <MDBIcon far icon=\"paper-plane\" className=\"ml-2\" />\n                </MDBBtn>\n              </div> \n            </form>\n          </MDBCardBody>\n        </MDBCard>\n      </MDBCol>\n    </MDBRow>\n  </MDBContainer>\n  <AddToHomescreen onAddToHomescreenClick={this.handleAddToHomescreenClick} />\n  </div>\n   );\n }\n}\n \n\nclass App extends Component {\n \n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <Route exact path=\"/\" component={Home}/> \n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}